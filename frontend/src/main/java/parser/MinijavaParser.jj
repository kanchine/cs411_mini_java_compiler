/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(JCCMinijavaParser)
package parser;

import ast.*;
import java.util.ArrayList;
import java.util.List;
import VarDecl.Kind.*;

public class JCCMinijavaParser {
}

PARSER_END(JCCMinijavaParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|   < SINGLE_LINE_COMMENT: "//" (~["\n"])* >
|   < #NOT_STAR_SLASH: ~["*"] | "*" ~["/"] >
}

TOKEN : /* KEYWORDS */
{
	< PRINT:		"System.out.println" >
|	< RETURN: 		"return" >
| 	< INT:			"int" >
| 	< BOOLEAN: 		"boolean" >
| 	< CLASS: 		"class" >
|   < PUBLIC:       "public" >
| 	< STATIC: 		"static" >
| 	< VOID: 		"void" >
| 	< MAIN: 		"main" >
| 	< STRING: 		"String" >
| 	< EXTENDS: 		"extends" >
| 	< IF: 		    "if" >
| 	< ELSE: 		"else" >
| 	< WHILE: 		"while" >
| 	< NEW: 			"new" >
| 	< LENGTH: 		"length" >
| 	< TRUE: 		"true" >
| 	< FALSE: 		"false" >
| 	< THIS: 		"this" >
}
TOKEN : /* SEPARATORS and OPERATORS*/
{	<LPAREN: "(">
|	<RPAREN: ")">
|	<LBRACKET: "[">
|	<RBRACKET: "]">
|	<LBRACE: "{">
|	<RBRACE: "}">
|	<ASSIGN: "=">
|	<QUESTION:	 "?">
|	<PLUS:	 "+" >
|	<MINUS:  "-" >
|	<MULT:   "*" >
|	<SMALLER:"<">
|	<NOT:	 "!">
| 	<COLON:	 ":" >
| 	<COMMA:	"," >
| 	<SEMICOLON:	 ";" >
| 	<DOT: "." >
| 	<AND: "&&" >
}

TOKEN :
{   < INTEGER_LITERAL: ( <DIGIT> )+ >
|   < IDENTIFIER: <LETTER> (<LETTER> | "_" | <DIGIT>)* >
|   < #LETTER: ["A" - "Z", "a" - "z"] >
|   < #DIGIT: ["0" - "9"] >
}


Program Program() : {
    NodeList<AST> ss = new NodeList<AST>();
    MainClass m;
    ClassDecl c;
}
{
    m = MainClass() ( c = ClassDeclaration() { ss.add(c); } )* <EOF>
	{ return new Program(m, ss); }
}


MainClass MainClass() : {
    String className;
    String argName;
    Statement statement;
}
{
    <CLASS> className = Identifier() "{"
    <PUBLIC> <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" argName = Identifier() ")"
    "{" statement = Statement() "}" "}"
    { return new MainClass(className, argName, statement); }
}


ClassDecl ClassDeclaration() : {
    String className;
    String superName = null; //May be null!
    NodeList<VarDecl> vars = new NodeList<VarDecl>();
    NodeList<MethodDecl> methods = new NodeList<MethodDecl>();
    VarDecl field;
    MethodDecl method;
}
{
    <CLASS> className = Identifier() ( <EXTENDS> superName = Identifier() )? "{"
    ( field = VarDeclaration(FIELD) { vars.add(field); } )*
    ( method = MethodDeclaration() { methods.add(method); } )* "}"
    { return new ClassDecl(className, superName, vas, methods); }
}

VarDecl VarDeclaration(VarDecl.Kind kind) : {
    Type type;
    String name;
    int index = 0; // what's the use of index for fields and local variables ???
}
{
    type = Type() name = Identifier() ";"
    { return new VarDecl(kind, type, name, index); }
}

MethodDecl MethodDeclaration() : {
    Type returnType;
    String methodName;
    NodeList<VarDecl> formals;
    NodeList<VarDecl> locals;
    NodeList<Statement> statements;
    Expression returnExp;
    VarDecl local;
    Statement s;
}
{
 <PUBLIC> returnType = Type() methodName = Identifier()
 "(" ( type = Type() name = Identifier()
 { formals.add(new VarDecl(type, name, formals.size())); }
 // can I declare local variables not inside declaraction braces above???

 ( "," t = Type() n = Identifier() )* )? ")"
 { formals.add(new VarDecl(t, n, formals.size())); }

 "{" ( local = VarDeclaration(LOCAL) { locals.add(local); } )*
 ( s = Statement() { statements.add(s); } )*
 <RETURN> returnExp = Expression() ";" "}"

 { return new MethodDecl(returnType, methodName, formals, locals, statements, returnExp); }
}

Type Type() : {
	Type t;
}
{
    LOOKAHEAD(2) // due to common prefix       is this use correct???
      <INT> "[" "]" { t = new IntArrayType(); }
    | <BOOLEAN>     { t = new BooleanType(); }
    | <INT>         { t = new IntegerType(); }
    | Identifier()  { t = new ObjectType(); }

    { return t; }
}


Statement Statement() : {
	Statement s = null; // this should not be null ever!
	Expression exp;

	NodeList<Statement> statements = new NodeList<Statement>(); // used for block

    Statement thn;
    Statement els;

	Statement body; // used for while

    String name;
    Expression index;
    Expression value;
}
{
	"{" ( s = Statement() { statements.add(s); } )* "}" { s = new Block(statements); }
	| <IF> "(" exp = Expression() ")" thn = Statement() <ELSE> els = Statement() { s = new If(exp, thn, els); }
	| <WHILE> "(" exp = Expression() ")" body = Statement()  { s = new While(exp, body); }
	| <PRINT> "(" exp = Expression() ")" ";" { s = new Print(exp); }
	| LOOKAHEAD(2) name = Identifier() "=" value = Expression() ";" { s = new Assign(name, value); }
	| name = Identifier() "[" index = Expression() "]" "=" value = Expression() ";" { s = new ArrayAssign(name, index, value); }

	{ return s; }
}


// The given EBNF grammar on Expression production is non-LL(1) and doesn't specify operator precedence and associativity
// We need to convert the given grammar into a LL(1) grammar that incorporates operator precedence and associativity
// Java operator precedence and associativity:  https://introcs.cs.princeton.edu/java/11precedence/

// For parsing anything with priority same or higher than &&
Expression Expression() :
{
  Expression e1, e2;
}
{
  e1 = LessThanExpr() ("&&" e2 = LessThanExpr() { e1 = new And(e1, e2); } )*
  { return e1; }
}

// For parsing anything with priority same or higher than <
Expression LessThanExpr() :
{
  Expression e1, e2;
}
{
  e1 = AddMinusExpr() ( "<" e2 = AddMinusExpr() { e1 = new LessThan(e1, e2); } )*
  { return e1; }
}

// For parsing anything with priority same or higher than + and -
Expression AddMinusExpr() :
{
  Expression e1, e2;
  Token op;
}
{
  e1 = MultExpr() ( (op="+"|op="-") e2 = MultExpr()
    { if (op.image.equals("+"))
        e1 = new Plus(e1, e2);
      else
        e1 = new Minus(e1, e2);
    }
  )*
  { return e1; }
}

// For parsing anything with priority same or higher than *
Expression MultExpr() :
{
  Expression e1, e2;
}
{
  e1 = NotExpr() ( "*" e2 = NotExpr() { e1 = new Times(e1, e2); } )*
  { return e1; }
}

// For parsing anything with priority same or higher than ! expressions
// ! operator is right-associative
Expression NotExpr() : {
	Expression e;
}
{    // not sure this production is implemented correctly ???
     "!" e = NotExpr()          { return new Not(exp); }
|    e = PrimaryExpression()	{ return new Not(e); }
}

/* PrimaryExpression is the expression that has highest precedence.*/
Expression PrimaryExpression() : {
	Token t;
	String id;
	Expression e;

	Expression index;
}
{
    t = <INTEGER_LITERAL>				{ return new IntegerLiteral(t.image); }
|   <TRUE>                              { return new BooleanLiteral(true); }
|   <FALSE>                             { return new BooleanLiteral(false); }
|   id = Identifier()					{ return new IdentifierExp(id); }
|   t = <THIS>                          { return new This(); }
|   LOOKAHEAD(2)
    <NEW> <INTEGER_LITERAL> "[" e = Expression() "]"
                                        { return new NewArray(e); }
|   <NEW> id = Identifier() "(" ")"     { return new NewObject(id); }
|   "(" e = Expression() ")"			{ return e; }


// TODO: these three access operation need lookahead(3) to resovle ambiguity, how to work around ???
|   LOOKAHEAD(2) e=Expression() "[" index=Expression() "]"   { return new ArrayLookup(e, index); }
|   LOOKAHEAD(2) Expression() "." "length"
|   LOOKAHEAD(2) Expression() "." Identifier() "(" ( Expression() ( "," Expression() )* )? ")"


}


String Identifier() : {
	Token i;
}
{
	i = <IDENTIFIER>
	{ return i.image; }
}
