/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
  LOOKAHEAD = 5;
  FORCE_LA_CHECK = true;
}
PARSER_BEGIN(X86_64SimParser)
package x86_64sim.parser;

import x86_64sim.*;
import x86_64sim.instruction.*;
import x86_64sim.args.*;
import java.util.ArrayList;
import java.util.List;

public class X86_64SimParser {
}

PARSER_END(X86_64SimParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|   < SINGLE_LINE_COMMENT: "#" (~["\n"])* >
}

TOKEN : /* KEYWORDS */
{	
	< GLOBL:		".globl" >
| 	< ALIGN:	".align">
| 	< QUAD:		".quad" >	
| 	< TEXT:		".text" >
| 	< DATA:		".data" >
| 	< SECTION:		".section" (~["\n"])* >
| 	< TYPE:		".type" (~["\n"])* >
| 	< SIZE:		".size" (~["\n"])* >
| 	< IDENT:	".ident" >
| 	< CMP:		"cmpq" >
| 	< INC:		"incq" >
| 	< DEC:		"decq" >
| 	< ADD:		"addq" >
| 	< SUB:		"subq" >
|   < NEG:      "negq" >
| 	< MUL:		"imulq" >
|   < DIV:		"idivq" >
| 	< XOR:		"xorq" >
| 	< CQTO:		"cqto" >
| 	< MOV:		"movq" >
| 	< CMOVL:	"cmovl" >
| 	< CMOVE:	"cmove" >
| 	< CMOVG:	"cmovg" >
| 	< CMOVLE:	"cmovle" >
| 	< CMOVNE:	"cmovne" >
| 	< CMOVGE:	"cmovge" >
| 	< CMOVB:	"cmovlb" >
| 	< CMOVA:	"cmova" >
| 	< CMOVBE:	"cmovbe" >
| 	< CMOVAE:	"cmovae" >
| 	< JL:		"jl" >
| 	< JE:		"je" >
| 	< JG:		"jg" >
| 	< JLE:		"jle" >
| 	< JNE:		"jne" >
| 	< JGE:		"jge" >
| 	< JB:		"jb" >
| 	< JA:		"ja" >
| 	< JBE:		"jbe" >
| 	< JAE:		"jae" >
|  	< JMP:		"jmp" >
|  	< CALL:		"call" >
| 	< LEAVE:	"leave" >
| 	< LEA:		"leaq" >
| 	< PUSH:		"pushq" >
| 	< RET:		"ret" >
| 	< SAR:		"sarq" >
}
TOKEN : /* SEPARATORS and OPERATORS*/
{	<LPAREN: "(">
|	<RPAREN: ")">
| 	<COMMA:	 "," >
| 	<DOLLAR:	"$" >
| 	< NL:		"\n" >
| 	< STAR: "*" >
}
	
TOKEN :
{
   	< INTEGER_LITERAL: ( "-" ) ? ( <DIGIT> )+ >
| 	< REGISTER: "%r" ("ax" | "bx" | "cx" | "dx" | "si" | "di" | "sp" | "bp" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" ) | "t" (<DIGIT>)+ >
| 	< RIP: "%rip" >
|   < IDENTIFIER: ( <LETTER> | "_" ) (<LETTER> | "_" | "." | "$" | <DIGIT>)* >
| 	< STRING:  "\"" (~[ "\"", "\n" ])* "\"" >
|   < #LETTER: ["A" - "Z", "a" - "z"] >
|   < #DIGIT: ["0" - "9"] >
}

Program Program() : { 
	Program p = new Program();
}
{
	( Statement(p) )*
	<EOF>
	{ return p; }
}

void Statement(Program p) : {
  	String name;
}
{	
	Directive(p)
| 	( name = Label() { p.add(name); } )? ( Instruction(p) )? < NL >
	{
	}
}

void Directive(Program p) : {
  String value;
}
{
  	< TEXT >
 	{ p.doText(); }
 | 	< DATA >
 	{ p.doData(); }
 | 	< QUAD > ( value = Integer() | value = Identifier() )
 	{ p.doQuad(value); }
 |  < ALIGN > value = Integer()
 	{ p.doAlign(value); }
 |	< GLOBL > < IDENTIFIER >
 |  < IDENT > < STRING >
 |  < SECTION >
 |  < TYPE >
 |  < SIZE >
  }

String Label() : {
  	String name;
}
{	name = Identifier() 
	":"
	{ return name; }
}

void Instruction(Program p) : {
	String offset = "0", source = null, index = null, target = null, scale = "1";
	Arg sourcearg = null, targetarg = null, extraarg = null;
	MemoryArg memoryarg;
}
{
  	< ADD > sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
  	{ p.add(new Add(sourcearg, targetarg)); }
|  	< ADD > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Add(sourcearg, targetarg)); }
|  	< ADD > sourcearg = IntLitA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Add(sourcearg, targetarg)); }
|  	< CALL > target = Identifier()
  	{ p.add(new Call(target)); }
|  	< CALL > < STAR > target = Register()
  	{ p.add(new Call("*", target)); }
| 	< CMOVL > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("l", sourcearg, targetarg)); }
| 	< CMOVE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("e", sourcearg, targetarg)); }
| 	< CMOVG > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("g", sourcearg, targetarg)); }
| 	< CMOVLE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("le", sourcearg, targetarg)); }
| 	< CMOVNE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("ne", sourcearg, targetarg)); }
| 	< CMOVGE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("ge", sourcearg, targetarg)); }
| 	< CMOVB > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("b", sourcearg, targetarg)); }
| 	< CMOVA > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("a", sourcearg, targetarg)); }
| 	< CMOVBE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("be", sourcearg, targetarg)); }
| 	< CMOVAE > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new CMov("ae", sourcearg, targetarg)); }
|  	< CMP > sourcearg = IntLitA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Cmp(sourcearg, targetarg)); }
| 	< CMP > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new Cmp(sourcearg, targetarg)); }
|  	< CMP > sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
  	{ p.add(new Cmp(sourcearg, targetarg)); }
|  	< DEC > targetarg = RegisterOrMemoryA()
  	{ p.add(new Dec(targetarg)); }
|  	< INC > targetarg = RegisterOrMemoryA()
  	{ p.add(new Inc(targetarg)); }
| 	< JL > target = Identifier()
	{ p.add(new CJmp("l", target)); }
| 	< JE > target = Identifier()
	{ p.add(new CJmp("e", target)); }
| 	< JG > target = Identifier()
	{ p.add(new CJmp("g", target)); }
| 	< JLE > target = Identifier()
	{ p.add(new CJmp("le", target)); }
| 	< JNE > target = Identifier()
	{ p.add(new CJmp("ne", target)); }
| 	< JGE > target = Identifier()
	{ p.add(new CJmp("ge", target)); }
| 	< JB > target = Identifier()
	{ p.add(new CJmp("b", target)); }
| 	< JA > target = Identifier()
	{ p.add(new CJmp("a", target)); }
| 	< JBE > target = Identifier()
	{ p.add(new CJmp("be", target)); }
| 	< JAE > target = Identifier()
	{ p.add(new CJmp("ae", target)); }
|  	< JMP > target = Identifier()
  	{ p.add(new Jmp(target)); }
|  	< LEAVE > 
  	{ p.add(new Leave()); }
|  	< MOV > (sourcearg = IntLitA() | sourcearg = IdLitA()) < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Move(sourcearg, targetarg)); }
| 	< MOV > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
	{ p.add(new Move(sourcearg, targetarg)); }
| 	< MOV > sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
	{ p.add(new Move(sourcearg, targetarg)); }
|  	< LEA > memoryarg = MemoryA() < COMMA > targetarg = RegisterA()
  	{ p.add(new Lea(memoryarg, targetarg)); }
|  	< MUL > extraarg = IntLitA() < COMMA > (
        sourcearg = RegisterA() < COMMA > targetarg = RegisterA()
      | sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
      | targetarg = RegisterA() )
  	{ if (sourcearg == null) p.add(new Mul(extraarg, targetarg)); else p.add(new Mul(extraarg, sourcearg, targetarg)); }
| 	< MUL > sourcearg = RegisterOrMemoryA() < COMMA > targetarg = RegisterA()
	{ p.add(new Mul(sourcearg, targetarg)); }
| 	< DIV > sourcearg = RegisterA()
	{ p.add(new Div(sourcearg)); }
| 	< CQTO > 
	{ p.add(new CQTO()); }
|  	< PUSH > target = Register()
  	{ p.add(new Push(target)); }
|  	< RET > 
  	{ p.add(new Ret()); }
|   < SAR > sourcearg = IntLitA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Sar(sourcearg, targetarg)); }
|  	< SUB > sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
  	{ p.add(new Sub(sourcearg, targetarg)); }
|  	< SUB > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Sub(sourcearg, targetarg)); }
|  	< SUB > sourcearg = IntLitA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Sub(sourcearg, targetarg)); }
|  	< XOR > sourcearg = MemoryA() < COMMA > targetarg = RegisterA()
  	{ p.add(new Xor(sourcearg, targetarg)); }
|  	< XOR > sourcearg = RegisterA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Xor(sourcearg, targetarg)); }
|  	< XOR > sourcearg = IntLitA() < COMMA > targetarg = RegisterOrMemoryA()
  	{ p.add(new Xor(sourcearg, targetarg)); }
|   < NEG > targetarg = RegisterOrMemoryA()
    { p.add(new Neg(targetarg)); }
}

MemoryArg MemoryA() :
{
    String base = null, index = null;
    String scale = "1", offset = "0";
    String id;
}
{
    ( offset = Integer() )? < LPAREN >
       ( base = Register() ( < COMMA > index = Register() ( < COMMA > scale = Integer() )? )?
         | < COMMA > index = Register() ( < COMMA > scale = Integer() )? ) < RPAREN >
    { return new MemoryArg(Long.parseLong(offset), base, index, Long.parseLong(scale)); }
    |
    id = Identifier() < LPAREN > Rip() < RPAREN >
    { return new RipMemoryArg(id); }
}
LiteralArg IntLitA() :
{
  	String i;
}
{
  	< DOLLAR > i = Integer() 
  	{ return new LiteralArg(Long.parseLong(i)); }
}
String IntLit() :
{
  	String i;
}
{
  	< DOLLAR > i = Integer()
  	{ return i; }
}

String Integer () :
{
  	Token i;
}
{
  	i = < INTEGER_LITERAL >
  	{ return i.image; }
}

String Identifier() : {
	Token i;
}
{
	i = <IDENTIFIER>
	{ return i.image; }
}

String IdLit() : {
	Token i;
}
{
	< DOLLAR > i = <IDENTIFIER>
	{ return i.image; }
}

Arg IdLitA() : {
	Token i;
}
{
	< DOLLAR > i = <IDENTIFIER>
	{ return new IdLiteralArg(i.image); }
}

RegisterArg RegisterA() : {
	Token i;
}
{
	i = <REGISTER>
	{ return new RegisterArg(i.image); }
}
Arg RegisterOrMemoryA() : {
    Arg a;
}
{
    ( a = RegisterA() | a = MemoryA() )
    { return a; }
}

String Register() : {
	Token i;
}
{
	i = <REGISTER>
	{ return i.image; }
}

String Rip() : {
	Token i;
}
{
	i = <RIP>
	{ return i.image; }
}